[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "compact-memory"
version = "1.0.0"
description = "Prototype implementation of the Compact Memory Agent"
authors = [{name = "Scott Falconer", email = "scottfalconer@gmail.com"}]
license = {text = "MIT"}
readme = "README.md"
dependencies = [
    "openai",
    "tiktoken",
    "numpy",
    "faiss-cpu",
    "click>=8.2",
    "tqdm",
    "pydantic>=2.0",
    "pyyaml",
    "typer[all]>=0.16.0",
    "portalocker",
    "rich>=13.6",
]

[project.optional-dependencies]
test = ["pytest"]
chroma = ["chromadb"]
spacy = ["spacy"]
optuna = ["optuna"]
ray = ["ray[tune]"]
embedding = ["sentence-transformers", "torch"]
local = ["transformers", "torch"]
gemini = ["google-generativeai"]
metrics = ["evaluate"]

[project.scripts]
compact-memory = "compact_memory.__main__:main"

[project.entry-points."compact_memory.engines"]
none = "compact_memory.engines.no_compression_engine:NoCompressionEngine"
pipeline = "compact_memory.engines.pipeline_engine:PipelineEngine"
first_last = "compact_memory.engines.first_last_engine:FirstLastEngine"

[tool.setuptools.packages.find]
where = ["."]
include = ["compact_memory", "compact_memory.*"]

[tool.setuptools.package-data]
"compact_memory" = ["py.typed"]
