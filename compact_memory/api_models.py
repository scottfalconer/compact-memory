from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field

class SourceReference(BaseModel):
    """Represents a reference to an original source chunk or document from which compressed content is derived."""
    document_id: Optional[str] = Field(None, description="Identifier for the original document, if available.")
    chunk_id: Optional[str] = Field(None, description="Identifier for the specific chunk within the document, if applicable.")
    text_snippet: str = Field(..., description="A snippet of the original text content that is being referenced.")
    score: Optional[float] = Field(None, description="Relevance or similarity score of this source to a query or context, if applicable.")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Any other metadata associated with the source chunk, e.g., original document URI, page number.")

class CompressedMemoryContext(BaseModel):
    """
    Represents the output of a memory compression process.
    It includes the compressed text and references to its original sources.
    """
    compressed_text: str = Field(..., description="The resulting compressed text or summary.")
    source_references: List[SourceReference] = Field(..., description="A list of source references that contributed to the compressed text.")
    strategy_id_used: str = Field(..., description="The instance ID of the compression strategy that was used to generate this context.")
    budget_info: Optional[Dict[str, Any]] = Field(None, description="Information about the budget used during compression, e.g., {'tokens_requested': 100, 'tokens_used': 95, 'format': 'tokens'}.")
    processing_time_ms: Optional[float] = Field(None, description="Time taken for the compression process in milliseconds.")
    strategy_llm_input: Optional[str] = Field(None, description="The input prompt or text provided to an LLM by the strategy, if applicable.")
    strategy_llm_output: Optional[str] = Field(None, description="The raw output received from an LLM by the strategy, if applicable (before any further processing).")
    full_trace: Optional[Dict[str, Any]] = Field(None, description="Detailed trace information about the compression process, for debugging or analysis. Structure may vary by strategy.")

class IngestionReport(BaseModel):
    """Reports the outcome of a data ingestion process into the memory store."""
    status: str = Field(..., description="Overall status of the ingestion. Examples: 'success', 'partial', 'failure'.")
    message: Optional[str] = Field(None, description="A human-readable message providing more details about the ingestion outcome.")
    items_processed: int = Field(..., description="The number of items (e.g., chunks, documents) successfully processed and stored.")
    items_failed: int = Field(..., description="The number of items that failed to process or store.")
    item_ids: Optional[List[str]] = Field(None, description="A list of identifiers for the items that were processed (successfully or not).")
    processing_time_ms: Optional[float] = Field(None, description="Total time taken for the ingestion process in milliseconds.")

class AgentInteractionResponse(BaseModel):
    """
    Represents the complete response from the Compact Memory Agent after processing a user message.
    This includes any LLM-generated response and the memory context that was used.
    """
    llm_response: Optional[str] = Field(None, description="The final response generated by the agent's LLM, if response generation was enabled.")
    context_used: CompressedMemoryContext = Field(..., description="The compressed memory context that was retrieved and potentially used for generating the LLM response.")
    session_id: Optional[str] = Field(None, description="Identifier for the conversation session, if applicable.")
    turn_id: Optional[str] = Field(None, description="Identifier for the specific turn within the session.")
    error_message: Optional[str] = Field(None, description="Any error message if an error occurred during processing the message.")
    processing_time_ms: Optional[float] = Field(None, description="Total time taken by the agent to process the message and generate this response, in milliseconds.")
